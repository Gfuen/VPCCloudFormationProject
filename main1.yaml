AWSTemplateFormatVersion: 2010-09-09

Description: >
  In this template we are demonstrating 2 EC2 instances in different VPCs that can talk to each 
  other using SSM Session Manager with agents installed.

Parameters:
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Select Amazon Linux(1) or 2
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2 # Amazon Linux [1]
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 # Amazon Linux 2
  InstanceType:
    Type: String
    Default: t3.micro
    Description: Select an instance type
    AllowedValues:
      - t3.micro

  # Parameters for the 'harness' VPC to host this demo.  All defaults are fine for our purposes.
  VpcCidr:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.191.0.0/16
  VpcCidr2:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  PrivateSubnetWithVPCEndpoint1Cidr:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.191.1.0/24
  PrivateSubnetWithVPCEndpoint2Cidr:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.2.0/24

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Settings"
        Parameters:
          - LatestAmiId
          - InstanceType
      - Label:
          default: "We create a boilerplate VPC to place the EC2 instance into"
        Parameters:
          - VpcCidr
          - VpcCidr2
          - PrivateSubnetWithVPCEndpoint1Cidr
          - PrivateSubnetWithVPCEndpoint2Cidr

Resources:

  # By default, AWS Systems Manager doesn't have permission to perform actions on your instances.
  # You must grant access by using an AWS Identity and Access Management (IAM) instance profile.
  # https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-configuring-access-role.html
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref Ec2InstanceRole ]
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        # ********** This is really the only adjustment we need to make to enable use of SSM Session Manager
        #            All the AWS::CloudFormation::Init and cloud init script work is setting up cloudwatch logs
        #            to give visibility to the SSM Agent actions.
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action:
              - sts:AssumeRole
      Path: /
  NewKeyPair1:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: MyKeyPair
  NewKeyPair2:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: MyKeyPairTwo

  # Attaching an SG with VPC Ingress from the other VPC

  SG1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: VPC1 Security Group
  SG2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc2
      GroupDescription: VPC2 Security Group
  OutboundRule1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId:
        Fn::GetAtt:
          - SG2
          - GroupId
      CidrIp: !Ref VpcCidr
  OutboundRule2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId:
        Fn::GetAtt:
          - SG1
          - GroupId
      CidrIp: !Ref VpcCidr2

  OutboundRuleSSM1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId:
        Fn::GetAtt:
          - SG1
          - GroupId
      CidrIp: 0.0.0.0/0

  OutboundRuleSSM2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId:
        Fn::GetAtt:
          - SG2
          - GroupId
      CidrIp: 0.0.0.0/0
  InboundRuleSSHSSM:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId:
        Fn::GetAtt:
          - SG1
          - GroupId
      CidrIp: 0.0.0.0/0
  InboundRuleSSHSSM2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId:
        Fn::GetAtt:
          - SG2
          - GroupId
      CidrIp: 0.0.0.0/0



  Ec2InPrivateSubnetWithVPCEndpoint1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      # KeyName: NO SSH Key needed
      IamInstanceProfile: !Ref Ec2InstanceProfile
      NetworkInterfaces:
        # The SSM Agent running on the EC2 instances must be able to connect to Session Manager's
        # public endpoint. You can also set up a PrivateLink connection to allow instances running
        # in private VPCs (without Internet access or a public IP address) to connect to Session Manager.

        # Here the instance is in a private subnet with a default route to the NAT Gateway so we can use that to
        # connect to the SSM's public endpoint
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref SG1
          SubnetId: !Ref PrivateSubnetWithVPCEndpoint1
      Tags:
        - Key: Name
          Value: Session Manager Test Instance in Private Subnet with VPCEndpoint1
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm

  Ec2InPrivateSubnetWithVPCEndpoint2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      # KeyName: NO SSH Key needed
      IamInstanceProfile: !Ref Ec2InstanceProfile
      NetworkInterfaces:
        # The SSM Agent running on the EC2 instances must be able to connect to Session Manager's
        # public endpoint. You can also set up a PrivateLink connection to allow instances running
        # in private VPCs (without Internet access or a public IP address) to connect to Session Manager.

        # Here the instance is in a private subnet with a default route to the NAT Gateway so we can use that to
        # connect to the SSM's public endpoint
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref SG2
          SubnetId: !Ref PrivateSubnetWithVPCEndpoint2
      Tags:
        - Key: Name
          Value: Session Manager test Instnace in Private Subnet with VPCEndpoint2
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm




  #######################################################
  # Everything below here is just a boilerplate VPC
  # used to place the EC2 into one of 2 scenarios
  #   - In Public Subnet with route to Internet Gateway
  #   - In private subnet with route to NAT Gateway
  #
  # There are no SSM specific features in the VPC, so
  # for the purposes of this exercise, it can be ignored.
  # \/  \/  \/  \/  \/  \/  \/  \/  \/  \/   \/   \/   \/
  #######################################################

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
  Vpc2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr2
  PrivateSubnetWithVPCEndpoint1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetWithVPCEndpoint1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private subnet1
  PrivateSubnetWithVPCEndpoint2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc2
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetWithVPCEndpoint2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private subnet2


# Create Internet Gateways and Internet Gateway Attachments for NAT Gateways

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  InternetGateway2:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway2
      VpcId: !Ref Vpc2

# NAT Gateways so that EC2 Instances in VPCs can talk with each other

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NATGatewayEIP.AllocationId
        SubnetId: !Ref PrivateSubnetWithVPCEndpoint1
        Tags:
        - Key: stack
          Value: production


  NATGatewayEIP2:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment2
    Properties:
      Domain: vpc
  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NATGatewayEIP2.AllocationId
        SubnetId: !Ref PrivateSubnetWithVPCEndpoint2
        Tags:
        - Key: stack
          Value: production




# Create Route and Route Tables for the 1st Private Subnet with 1 EC2 Instance

  PrivateSubnet1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: Routes for private subnet1
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1
      DestinationCidrBlock: 10.192.20.0/24
      NatGatewayId: !Ref NATGateway
  PrivateSubnetTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet1
      SubnetId: !Ref PrivateSubnetWithVPCEndpoint1


# Create Route and Route Tables for the 2nd Private Subnet with 1 EC2 Instance

  PrivateSubnet2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc2
      Tags:
        - Key: Name
          Value: Routes for private subnet1
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2
      DestinationCidrBlock: 10.191.20.0/24
      NatGatewayId: !Ref NATGateway2
  PrivateSubnetTableAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet2
      SubnetId: !Ref PrivateSubnetWithVPCEndpoint2


# Output Links to access newly created Instances in the AWS Management Console

Outputs:

  SessionManagementListUrl:
    Description: The URL to the Session Management Console listing all instances it is aware of
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/start-session?region=${AWS::Region}
  SessionManagementPrivateSubnetWithVPCEndpoint1:
    Description: The URL to the Session Management Console for this instance
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${Ec2InPrivateSubnetWithVPCEndpoint1}?region=${AWS::Region}
  SessionManagementPrivateSubneWithVPCEndpoint2:
    Description: The URL to the Session Management Console for this instance
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${Ec2InPrivateSubnetWithVPCEndpoint2}?region=${AWS::Region}