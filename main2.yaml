AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 Instance with SSM Session Manager Access'


Parameters:
  KeyName:
    Type: String
    Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instance'


Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: 'Name'
          Value: 'MyVPC'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'MyInternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: 'us-east-1a' 
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnet'

  SG1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: VPC1 Security Group

  InboundRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'SG1'
      Description: 'Inbound from the same security group'
      GroupId:
        Fn::GetAtt:
          - SG1
          - GroupId

  OutboundRuleSSM1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId:
        Fn::GetAtt:
          - SG1
          - GroupId
      CidrIp: 0.0.0.0/0

  MyInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0ff8a91507f77f867'
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
        - DeviceIndex: '0'
          SubnetId: !Ref 'PublicSubnet'
          AssociatePublicIpAddress: true
          GroupSet:
            - !Ref 'SG1'
      IamInstanceProfile: !Ref 'SSMInstanceProfile'

  SSMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref 'SSMRole'

  SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'SSMPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssmmessages:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2messages:*'
                Resource: '*'

  PublicNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: 'Name'
          Value: 'PublicNACL'

  InboundRuleSSM:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref 'PublicNACL'
      RuleNumber: 100
      Protocol: '6' # TCP
      RuleAction: 'allow'
      Egress: false
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 1
        To: 65535

  OutboundRuleAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref 'PublicNACL'
      RuleNumber: 200
      Protocol: '-1' 
      RuleAction: 'allow'
      Egress: true
      CidrBlock: '0.0.0.0/0'

Outputs:
  InstanceId:
    Description: 'Instance ID of the created EC2 instance'
    Value: !Ref 'MyInstance'
